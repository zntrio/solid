// Licensed to SolID under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. SolID licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: oidc/client/v1/client_api.proto

package clientv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientAuthenticationService_Authenticate_FullMethodName = "/oidc.client.v1.ClientAuthenticationService/Authenticate"
)

// ClientAuthenticationServiceClient is the client API for ClientAuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientAuthenticationServiceClient interface {
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
}

type clientAuthenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientAuthenticationServiceClient(cc grpc.ClientConnInterface) ClientAuthenticationServiceClient {
	return &clientAuthenticationServiceClient{cc}
}

func (c *clientAuthenticationServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, ClientAuthenticationService_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientAuthenticationServiceServer is the server API for ClientAuthenticationService service.
// All implementations should embed UnimplementedClientAuthenticationServiceServer
// for forward compatibility
type ClientAuthenticationServiceServer interface {
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
}

// UnimplementedClientAuthenticationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClientAuthenticationServiceServer struct {
}

func (UnimplementedClientAuthenticationServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}

// UnsafeClientAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientAuthenticationServiceServer will
// result in compilation errors.
type UnsafeClientAuthenticationServiceServer interface {
	mustEmbedUnimplementedClientAuthenticationServiceServer()
}

func RegisterClientAuthenticationServiceServer(s grpc.ServiceRegistrar, srv ClientAuthenticationServiceServer) {
	s.RegisterService(&ClientAuthenticationService_ServiceDesc, srv)
}

func _ClientAuthenticationService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAuthenticationServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientAuthenticationService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAuthenticationServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientAuthenticationService_ServiceDesc is the grpc.ServiceDesc for ClientAuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientAuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oidc.client.v1.ClientAuthenticationService",
	HandlerType: (*ClientAuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _ClientAuthenticationService_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oidc/client/v1/client_api.proto",
}

const (
	ClientRegistrationService_Register_FullMethodName = "/oidc.client.v1.ClientRegistrationService/Register"
)

// ClientRegistrationServiceClient is the client API for ClientRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientRegistrationServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type clientRegistrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientRegistrationServiceClient(cc grpc.ClientConnInterface) ClientRegistrationServiceClient {
	return &clientRegistrationServiceClient{cc}
}

func (c *clientRegistrationServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, ClientRegistrationService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientRegistrationServiceServer is the server API for ClientRegistrationService service.
// All implementations should embed UnimplementedClientRegistrationServiceServer
// for forward compatibility
type ClientRegistrationServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

// UnimplementedClientRegistrationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClientRegistrationServiceServer struct {
}

func (UnimplementedClientRegistrationServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

// UnsafeClientRegistrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientRegistrationServiceServer will
// result in compilation errors.
type UnsafeClientRegistrationServiceServer interface {
	mustEmbedUnimplementedClientRegistrationServiceServer()
}

func RegisterClientRegistrationServiceServer(s grpc.ServiceRegistrar, srv ClientRegistrationServiceServer) {
	s.RegisterService(&ClientRegistrationService_ServiceDesc, srv)
}

func _ClientRegistrationService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistrationServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientRegistrationService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistrationServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientRegistrationService_ServiceDesc is the grpc.ServiceDesc for ClientRegistrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientRegistrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oidc.client.v1.ClientRegistrationService",
	HandlerType: (*ClientRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ClientRegistrationService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oidc/client/v1/client_api.proto",
}
