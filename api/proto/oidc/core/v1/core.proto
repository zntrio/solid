// Licensed to SolID under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. SolID licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

package oidc.core.v1;

option go_package = "oidc/core/v1;corev1";

import "google/protobuf/wrappers.proto";

// -----------------------------------------------------------------------------

// Display defines values to set how to displays the authentication and consent
// user interface pages to the End-User.
enum Display {
  // Default value when nothing specificied.
  DISPLAY_INVALID = 0;
  // Value to set as unknown.
  DISPLAY_UNKNOWN = 1;
  // The Authorization Server SHOULD display the authentication and consent UI
  // consistent with a full User Agent page view. If the display parameter is
  // not specified, this is the default display mode.
  DISPLAY_PAGE = 2;
  // The Authorization Server SHOULD display the authentication and consent UI
  // consistent with a popup User Agent window. The popup User Agent window
  // should be of an appropriate size for a login-focused dialog and should not
  // obscure the entire window that it is popping up over.
  DISPLAY_POPUP = 3;
  // The Authorization Server SHOULD display the authentication and consent UI
  // consistent with a device that leverages a touch interface.
  DISPLAY_TOUCH = 4;
  // The Authorization Server SHOULD display the authentication and consent UI
  // consistent with a "feature phone" type display.
  DISPLAY_WAP = 5;
}

// Prompt defines values for required prompt actions.
enum Prompt {
    // Default value when nothing specificied.
    PROMPT_INVALID = 0;
    // Value to set as unknown.
    PROMPT_UNKNOWN = 1;
    // The Authorization Server MUST NOT display any authentication or consent
    // user interface pages. An error is returned if an End-User is not already
    // authenticated or the Client does not have pre-configured consent for the
    // requested Claims or does not fulfill other conditions for processing the
    // request. The error code will typically be login_required,
    // interaction_required, or another code defined in Section 3.1.2.6. This
    // can be used as a method to check for existing authentication and/or
    // consent.
    PROMPT_NONE = 2;
    // The Authorization Server SHOULD prompt the End-User for reauthentication.
    // If it cannot reauthenticate the End-User, it MUST return an error,
    // typically login_required.
    PROMPT_LOGIN = 3;
    // The Authorization Server SHOULD prompt the End-User for consent before
    // returning information to the Client. If it cannot obtain consent, it MUST
    // return an error, typically consent_required.
    PROMPT_CONSENT = 4;
    // The Authorization Server SHOULD prompt the End-User to select a user
    // account. This enables an End-User who has multiple accounts at the
    // Authorization Server to select amongst the multiple accounts that they
    // might have current sessions for. If it cannot obtain an account selection
    // choice made by the End-User, it MUST return an error, typically
    // account_selection_required.
    PROMPT_SELECT_ACCOUNT = 5;
}

message GrantAuthorizationCode {
  string code = 1;
  string redirect_uri = 2;
  string code_verifier = 3;
}

message GrantRefreshToken {
  string refresh_token = 1;
}

// https://tools.ietf.org/html/rfc8628#section-3.4
message GrantDeviceCode {
  // REQUIRED.  The device verification code, "device_code" from the
  // device authorization response, defined in Section 3.2.
  string device_code = 1;

  // REQUIRED if the client is not authenticating with the
  // authorization server as described in Section 3.2.1. of [RFC6749].
  // The client identifier as described in Section 2.2 of [RFC6749].
  string client_id = 2;

}

message GrantClientCredentials {
}

// https://tools.ietf.org/html/rfc8693#section-2.1
message GrantTokenExchange {
  // OPTIONAL.  An identifier, as described in Section 3, for the type
  // of the requested security token.  If the requested type is
  // unspecified, the issued token type is at the discretion of the
  // authorization server and may be dictated by knowledge of the
  // requirements of the service or resource indicated by the
  // "resource" or "audience" parameter.
  google.protobuf.StringValue requested_token_type = 1;

  // REQUIRED.  A security token that represents the identity of the
  // party on behalf of whom the request is being made.  Typically, the
  // subject of this token will be the subject of the security token
  // issued in response to the request.
  string subject_token = 2;

  // REQUIRED.  An identifier, as described in Section 3, that
  // indicates the type of the security token in the "subject_token"
  // parameter.
  string subject_token_type = 3;

  // OPTIONAL.  A security token that represents the identity of the
  // acting party.  Typically, this will be the party that is
  // authorized to use the requested security token and act on behalf
  // of the subject.
  google.protobuf.StringValue actor_token = 4;

  // An identifier, as described in Section 3, that indicates the type
  // of the security token in the "actor_token" parameter.  This is
  // REQUIRED when the "actor_token" parameter is present in the
  // request but MUST NOT be included otherwise.
  google.protobuf.StringValue actor_token_type = 5;
}

// An Authentication Request is an OAuth 2.0 Authorization Request that requests
// that the End-User be authenticated by the Authorization Server.
message AuthorizationRequest {
  // REQUIRED. OpenID Connect requests MUST contain the openid scope value. If
  // the openid scope value is not present, the behavior is entirely unspecified.
  // Other scope values MAY be present. Scope values used that are not understood
  // by an implementation SHOULD be ignored.
  string scope = 1;

  // REQUIRED. OAuth 2.0 Response Type value that determines the authorization
  // processing flow to be used, including what parameters are returned from
  // the endpoints used. When using the Authorization Code Flow, this value is
  // code.
  string response_type = 2;

  // REQUIRED. OAuth 2.0 Client Identifier valid at the Authorization Server.
  string client_id = 3;

  // REQUIRED. Redirection URI to which the response will be sent. This URI
  // MUST exactly match one of the Redirection URI values for the Client
  // pre-registered at the OpenID Provider, with the matching performed as
  // described in Section 6.2.1 of [RFC3986] (Simple String Comparison).
  // When using this flow, the Redirection URI SHOULD use the https scheme;
  // however, it MAY use the http scheme, provided that the Client Type is
  // confidential, as defined in Section 2.1 of OAuth 2.0, and provided the OP
  // allows the use of http Redirection URIs in this case. The Redirection URI
  // MAY use an alternate scheme, such as one that is intended to identify a
  // callback into a native application.
  string redirect_uri = 4;

  // RECOMMENDED. Opaque value used to maintain state between the request and
  // the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation
  // is done by cryptographically binding the value of this parameter with a
  // browser cookie.
  string state = 5;

  // OPTIONAL. Informs the Authorization Server of the mechanism to be used for
  // returning parameters from the Authorization Endpoint. This use of this
  // parameter is NOT RECOMMENDED when the Response Mode that would be requested
  // is the default mode specified for the Response Type.
  google.protobuf.StringValue response_mode = 6;

  // OPTIONAL. String value used to associate a Client session with an ID Token,
  // and to mitigate replay attacks. The value is passed through unmodified from
  // the Authentication Request to the ID Token. Sufficient entropy MUST be
  // present in the nonce values used to prevent attackers from guessing values.
  // https://tools.ietf.org/html/draft-ietf-oauth-security-topics-15#section-4.5.3
  string nonce = 7;

  // OPTIONAL. ASCII string value that specifies how the Authorization Server
  // displays the authentication and consent user interface pages to the End-User.
  google.protobuf.StringValue display = 8;

  // OPTIONAL. Space delimited, case sensitive list of ASCII string values that
  // specifies whether the Authorization Server prompts the End-User for
  // reauthentication and consent.
  google.protobuf.StringValue prompt = 9;

  // OPTIONAL. Maximum Authentication Age. Specifies the allowable elapsed time
  // in seconds since the last time the End-User was actively authenticated by
  // the OP. If the elapsed time is greater than this value, the OP MUST attempt
  // to actively re-authenticate the End-User. (The max_age request parameter
  // corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request
  // parameter.) When max_age is used, the ID Token returned MUST include an
  // auth_time Claim Value.
  google.protobuf.UInt64Value max_age = 10;

  // OPTIONAL. End-User's preferred languages and scripts for the user
  // interface, represented as a space-separated list of BCP47 [RFC5646]
  // language tag values, ordered by preference. For instance, the value "fr-CA
  // fr en" represents a preference for French as spoken in Canada, then French
  // (without a region designation), followed by English (without a region
  // designation). An error SHOULD NOT result if some or all of the requested
  // locales are not supported by the OpenID Provider.
  google.protobuf.StringValue ui_locales = 11;

  // OPTIONAL. ID Token previously issued by the Authorization Server being
  // passed as a hint about the End-User's current or past authenticated session
  // with the Client. If the End-User identified by the ID Token is logged in or
  // is logged in by the request, then the Authorization Server returns a
  // positive response; otherwise, it SHOULD return an error, such as
  // login_required. When possible, an id_token_hint SHOULD be present when
  // prompt=none is used and an invalid_request error MAY be returned if it is
  // not; however, the server SHOULD respond successfully when possible, even
  // if it is not present. The Authorization Server need not be listed as an
  // audience of the ID Token when it is used as an id_token_hint value.
  // If the ID Token received by the RP from the OP is encrypted, to use it as
  // an id_token_hint, the Client MUST decrypt the signed ID Token contained
  // within the encrypted ID Token. The Client MAY re-encrypt the signed ID
  // token to the Authentication Server using a key that enables the server to
  // decrypt the ID Token, and use the re-encrypted ID token as the
  // id_token_hint value.
  google.protobuf.StringValue id_token_hint = 12;

  // OPTIONAL. Requested Authentication Context Class Reference values.
  // Space-separated string that specifies the acr values that the Authorization
  // Server is being requested to use for processing this Authentication
  // Request, with the values appearing in order of preference. The
  // Authentication Context Class satisfied by the authentication performed is
  // returned as the acr Claim Value, as specified in Section 2. The acr Claim
  // is requested as a Voluntary Claim by this parameter.
  google.protobuf.StringValue acr_values = 13;

  // OPTIONAL. This parameter enables OpenID Connect requests to be passed in a
  // single, self-contained parameter and to be optionally signed and/or
  // encrypted. The parameter value is a Request Object value, as specified in
  // Section 6.1. It represents the request as a JWT whose Claims are the
  // request parameters.
  google.protobuf.StringValue request = 14;

  // OPTIONAL. This parameter enables OpenID Connect requests to be passed by
  // reference, rather than by value. The request_uri value is a URL using the
  // https scheme referencing a resource containing a Request Object value,
  // which is a JWT containing the request parameters.
  google.protobuf.StringValue request_uri = 15;

  // REQUIRED. This parameter enables PKCE flow.
  string code_challenge = 16;

  // REQUIRED. This parameter enables PKCE flow.
  string code_challenge_method = 17;

  // REQUIRED. Add targeted audience.
  string audience = 18;

  // OPTIONAL.
  // https://tools.ietf.org/html/draft-fett-oauth-dpop-04#section-5
  string dpop_proof = 19;

  // OPTIONAL
  // https://tools.ietf.org/html/rfc8707
  // Indicates the target service or resource to which access is being
  // requested.  Its value MUST be an absolute URI, as specified by
  // Section 4.3 of [RFC3986].  The URI MUST NOT include a fragment
  // component.  It SHOULD NOT include a query component, but it is
  // recognized that there are cases that make a query component a
  // useful and necessary part of the resource parameter, such as when
  // one or more query parameters are used to scope requests to an
  // application.  The "resource" parameter URI value is an identifier
  // representing the identity of the resource, which MAY be a locator
  // that corresponds to a network-addressable location where the
  // target resource is hosted.  Multiple "resource" parameters MAY be
  // used to indicate that the requested token is intended to be used
  // at multiple resources.
  google.protobuf.StringValue resource = 20;

  // OPTIONAL.
  // Issuer url used for JARM decoding.
  string iss = 21;
}
