// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: oidc/core/v1/core_api.proto

package corev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationAPIClient is the client API for AuthorizationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationAPIClient interface {
	Authorize(ctx context.Context, in *AuthorizationCodeRequest, opts ...grpc.CallOption) (*AuthorizationCodeResponse, error)
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type authorizationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationAPIClient(cc grpc.ClientConnInterface) AuthorizationAPIClient {
	return &authorizationAPIClient{cc}
}

func (c *authorizationAPIClient) Authorize(ctx context.Context, in *AuthorizationCodeRequest, opts ...grpc.CallOption) (*AuthorizationCodeResponse, error) {
	out := new(AuthorizationCodeResponse)
	err := c.cc.Invoke(ctx, "/oidc.core.v1.AuthorizationAPI/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationAPIClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/oidc.core.v1.AuthorizationAPI/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationAPIServer is the server API for AuthorizationAPI service.
// All implementations must embed UnimplementedAuthorizationAPIServer
// for forward compatibility
type AuthorizationAPIServer interface {
	Authorize(context.Context, *AuthorizationCodeRequest) (*AuthorizationCodeResponse, error)
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	mustEmbedUnimplementedAuthorizationAPIServer()
}

// UnimplementedAuthorizationAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationAPIServer struct {
}

func (UnimplementedAuthorizationAPIServer) Authorize(context.Context, *AuthorizationCodeRequest) (*AuthorizationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthorizationAPIServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedAuthorizationAPIServer) mustEmbedUnimplementedAuthorizationAPIServer() {}

// UnsafeAuthorizationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationAPIServer will
// result in compilation errors.
type UnsafeAuthorizationAPIServer interface {
	mustEmbedUnimplementedAuthorizationAPIServer()
}

func RegisterAuthorizationAPIServer(s grpc.ServiceRegistrar, srv AuthorizationAPIServer) {
	s.RegisterService(&AuthorizationAPI_ServiceDesc, srv)
}

func _AuthorizationAPI_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationAPIServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oidc.core.v1.AuthorizationAPI/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationAPIServer).Authorize(ctx, req.(*AuthorizationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationAPI_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationAPIServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oidc.core.v1.AuthorizationAPI/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationAPIServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationAPI_ServiceDesc is the grpc.ServiceDesc for AuthorizationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oidc.core.v1.AuthorizationAPI",
	HandlerType: (*AuthorizationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _AuthorizationAPI_Authorize_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _AuthorizationAPI_Token_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oidc/core/v1/core_api.proto",
}
