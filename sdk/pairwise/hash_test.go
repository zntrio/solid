// Licensed to SolID under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. SolID licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package pairwise

import "testing"

func Test_hashEncoder_Encode(t *testing.T) {
	type fields struct {
		salt []byte
	}
	type args struct {
		sectorID string
		subject  string
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    string
		wantErr bool
	}{
		{
			name:    "nil",
			wantErr: true,
		},
		{
			name: "salt too short",
			fields: fields{
				salt: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
			wantErr: true,
		},
		{
			name: "blank subject",
			fields: fields{
				salt: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
			args: args{
				subject: "    ",
			},
			wantErr: true,
		},
		{
			name: "empty subject",
			fields: fields{
				salt: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
			args: args{
				subject: "",
			},
			wantErr: true,
		},
		{
			name: "salt-16",
			fields: fields{
				salt: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
			args: args{
				subject: "test",
			},
			want:    "Lv66CmN2nfnAUDkK8oOZ0BZ9bUgMnf7h4c2cTFDxJX0",
			wantErr: false,
		},
		{
			name: "salt-32",
			fields: fields{
				salt: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
			args: args{
				subject: "test",
			},
			want:    "9Y5Hy43EvYCR6v4Fu3bt4OJZg2AlCgwpwEc4dc_-o2w",
			wantErr: false,
		},
		{
			name: "salt-64",
			fields: fields{
				salt: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
			args: args{
				subject: "test",
			},
			want:    "CnoEuXsTY9vP37sOgKgf6Fzy3BXNAGjKRAOak_kI5Jg",
			wantErr: false,
		},
		{
			name: "salt too long",
			fields: fields{
				salt: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
			args: args{
				subject: "test",
			},
			wantErr: true,
		},
		{
			name: "alternative sector id",
			fields: fields{
				salt: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
			args: args{
				subject:  "test",
				sectorID: "http://backend.exmaple.com",
			},
			want:    "OhB_oAEehjt6h3N_cfkrK-CoFhsOntVjhQrcxi0HnD4",
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tr := Hash(tt.fields.salt)
			got, err := tr.Encode(tt.args.sectorID, tt.args.subject)
			if (err != nil) != tt.wantErr {
				t.Errorf("hashEncoder.Encode() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("hashEncoder.Encode() = %v, want %v", got, tt.want)
			}
		})
	}
}
