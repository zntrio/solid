// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: oidc/core/v1/revocation_api.proto

package corev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenRevocatonAPIClient is the client API for TokenRevocatonAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenRevocatonAPIClient interface {
	RevokeToken(ctx context.Context, in *TokenRevocationRequest, opts ...grpc.CallOption) (*TokenRevocationResponse, error)
}

type tokenRevocatonAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenRevocatonAPIClient(cc grpc.ClientConnInterface) TokenRevocatonAPIClient {
	return &tokenRevocatonAPIClient{cc}
}

func (c *tokenRevocatonAPIClient) RevokeToken(ctx context.Context, in *TokenRevocationRequest, opts ...grpc.CallOption) (*TokenRevocationResponse, error) {
	out := new(TokenRevocationResponse)
	err := c.cc.Invoke(ctx, "/oidc.core.v1.TokenRevocatonAPI/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenRevocatonAPIServer is the server API for TokenRevocatonAPI service.
// All implementations must embed UnimplementedTokenRevocatonAPIServer
// for forward compatibility
type TokenRevocatonAPIServer interface {
	RevokeToken(context.Context, *TokenRevocationRequest) (*TokenRevocationResponse, error)
	mustEmbedUnimplementedTokenRevocatonAPIServer()
}

// UnimplementedTokenRevocatonAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTokenRevocatonAPIServer struct {
}

func (UnimplementedTokenRevocatonAPIServer) RevokeToken(context.Context, *TokenRevocationRequest) (*TokenRevocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedTokenRevocatonAPIServer) mustEmbedUnimplementedTokenRevocatonAPIServer() {}

// UnsafeTokenRevocatonAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenRevocatonAPIServer will
// result in compilation errors.
type UnsafeTokenRevocatonAPIServer interface {
	mustEmbedUnimplementedTokenRevocatonAPIServer()
}

func RegisterTokenRevocatonAPIServer(s grpc.ServiceRegistrar, srv TokenRevocatonAPIServer) {
	s.RegisterService(&TokenRevocatonAPI_ServiceDesc, srv)
}

func _TokenRevocatonAPI_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenRevocatonAPIServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oidc.core.v1.TokenRevocatonAPI/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenRevocatonAPIServer).RevokeToken(ctx, req.(*TokenRevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenRevocatonAPI_ServiceDesc is the grpc.ServiceDesc for TokenRevocatonAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenRevocatonAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oidc.core.v1.TokenRevocatonAPI",
	HandlerType: (*TokenRevocatonAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RevokeToken",
			Handler:    _TokenRevocatonAPI_RevokeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oidc/core/v1/revocation_api.proto",
}
