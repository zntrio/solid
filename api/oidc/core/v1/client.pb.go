// Licensed to SolID under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. SolID licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.3
// source: oidc/core/v1/client.proto

package corev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClientType describes OIDC Client type enumeration.
// https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-04#section-2.1
type ClientType int32

const (
	// Default value
	ClientType_CLIENT_TYPE_INVALID ClientType = 0
	// Explicit unknown
	ClientType_CLIENT_TYPE_UNKNOWN ClientType = 1
	// Clients that have credentials and have a prior relationship with the AS are
	// designated as "confidential clients". A client that has been registered at
	// the authorization server by a registered application developer, where the
	// client is expected to be run as server-side code, would be considered a
	// confidential client.
	ClientType_CLIENT_TYPE_CONFIDENTIAL ClientType = 2
	// Clients that have credentials but no prior relationship with the AS are
	// designated as "credentialed clients". A client that runs on an end-user's
	// device, and uses Dynamic Client Registration ([RFC7591]) to establish
	// credentials the first time the app runs, would be considered a credentialed
	// client.
	ClientType_CLIENT_TYPE_CREDENTIALED ClientType = 3
	// Clients without credentials are called "public clients". An application
	// deployed as a single-page app on a static web host would be considered a
	// public client.
	ClientType_CLIENT_TYPE_PUBLIC ClientType = 4
)

// Enum value maps for ClientType.
var (
	ClientType_name = map[int32]string{
		0: "CLIENT_TYPE_INVALID",
		1: "CLIENT_TYPE_UNKNOWN",
		2: "CLIENT_TYPE_CONFIDENTIAL",
		3: "CLIENT_TYPE_CREDENTIALED",
		4: "CLIENT_TYPE_PUBLIC",
	}
	ClientType_value = map[string]int32{
		"CLIENT_TYPE_INVALID":      0,
		"CLIENT_TYPE_UNKNOWN":      1,
		"CLIENT_TYPE_CONFIDENTIAL": 2,
		"CLIENT_TYPE_CREDENTIALED": 3,
		"CLIENT_TYPE_PUBLIC":       4,
	}
)

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_oidc_core_v1_client_proto_enumTypes[0].Descriptor()
}

func (ClientType) Type() protoreflect.EnumType {
	return &file_oidc_core_v1_client_proto_enumTypes[0]
}

func (x ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientType.Descriptor instead.
func (ClientType) EnumDescriptor() ([]byte, []int) {
	return file_oidc_core_v1_client_proto_rawDescGZIP(), []int{0}
}

// ClientProfile describes client profile enumeration.
// https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-04#section-2.1
type ClientProfile int32

const (
	// Default value
	ClientProfile_CLIENT_PROFILE_INVALID ClientProfile = 0
	// Explicit unknown
	ClientProfile_CLIENT_PROFILE_UNKNOWN ClientProfile = 1
	// A web application is a confidential client
	// running on a web server.  Resource owners access the client via an
	// HTML user interface rendered in a user agent on the device used by
	// the resource owner.  The client credentials as well as any access
	// tokens issued to the client are stored on the web server and are
	// not exposed to or accessible by the resource owner.
	ClientProfile_CLIENT_PROFILE_WEB_APPLICATION ClientProfile = 2
	// A browser-based application is a public
	// client in which the client code is downloaded from a web server
	// and executes within a user agent (e.g., web browser) on the device
	// used by the resource owner.  Protocol data and credentials are
	// easily accessible (and often visible) to the resource owner.
	// Since such applications reside within the user agent, they can
	// make seamless use of the user agent capabilities when requesting
	// authorization.
	ClientProfile_CLIENT_PROFILE_BROWSER_BASED_APPLICATION ClientProfile = 3
	// A native application is a public client
	// installed and executed on the device used by the resource owner.
	// Protocol data and credentials are accessible to the resource
	// owner.  It is assumed that any client authentication credentials
	// included in the application can be extracted.  On the other hand,
	// dynamically issued credentials such as access tokens or refresh
	// tokens can receive an acceptable level of protection.  At a
	// minimum, these credentials are protected from hostile servers with
	// which the application may interact.  On some platforms, these
	// credentials might be protected from other applications residing on
	// the same device.
	ClientProfile_CLIENT_PROFILE_NATIVE_APPLICATION ClientProfile = 4
)

// Enum value maps for ClientProfile.
var (
	ClientProfile_name = map[int32]string{
		0: "CLIENT_PROFILE_INVALID",
		1: "CLIENT_PROFILE_UNKNOWN",
		2: "CLIENT_PROFILE_WEB_APPLICATION",
		3: "CLIENT_PROFILE_BROWSER_BASED_APPLICATION",
		4: "CLIENT_PROFILE_NATIVE_APPLICATION",
	}
	ClientProfile_value = map[string]int32{
		"CLIENT_PROFILE_INVALID":                   0,
		"CLIENT_PROFILE_UNKNOWN":                   1,
		"CLIENT_PROFILE_WEB_APPLICATION":           2,
		"CLIENT_PROFILE_BROWSER_BASED_APPLICATION": 3,
		"CLIENT_PROFILE_NATIVE_APPLICATION":        4,
	}
)

func (x ClientProfile) Enum() *ClientProfile {
	p := new(ClientProfile)
	*p = x
	return p
}

func (x ClientProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_oidc_core_v1_client_proto_enumTypes[1].Descriptor()
}

func (ClientProfile) Type() protoreflect.EnumType {
	return &file_oidc_core_v1_client_proto_enumTypes[1]
}

func (x ClientProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientProfile.Descriptor instead.
func (ClientProfile) EnumDescriptor() ([]byte, []int) {
	return file_oidc_core_v1_client_proto_rawDescGZIP(), []int{1}
}

// Client defines internal OIDC client properties.
type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId                              string     `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientType                            ClientType `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3,enum=oidc.core.v1.ClientType" json:"client_type,omitempty"`
	RedirectUris                          []string   `protobuf:"bytes,3,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	ResponseTypes                         []string   `protobuf:"bytes,4,rep,name=response_types,json=responseTypes,proto3" json:"response_types,omitempty"`
	ResponseModes                         []string   `protobuf:"bytes,5,rep,name=response_modes,json=responseModes,proto3" json:"response_modes,omitempty"`
	GrantTypes                            []string   `protobuf:"bytes,6,rep,name=grant_types,json=grantTypes,proto3" json:"grant_types,omitempty"`
	ApplicationType                       string     `protobuf:"bytes,7,opt,name=application_type,json=applicationType,proto3" json:"application_type,omitempty"`
	Contacts                              []string   `protobuf:"bytes,8,rep,name=contacts,proto3" json:"contacts,omitempty"`
	ClientName                            string     `protobuf:"bytes,9,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	LogoUri                               string     `protobuf:"bytes,10,opt,name=logo_uri,json=logoUri,proto3" json:"logo_uri,omitempty"`
	ClientUri                             string     `protobuf:"bytes,11,opt,name=client_uri,json=clientUri,proto3" json:"client_uri,omitempty"`
	PolicyUri                             string     `protobuf:"bytes,12,opt,name=policy_uri,json=policyUri,proto3" json:"policy_uri,omitempty"`
	TosUri                                string     `protobuf:"bytes,13,opt,name=tos_uri,json=tosUri,proto3" json:"tos_uri,omitempty"`
	JwksUri                               string     `protobuf:"bytes,14,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	Jwks                                  []byte     `protobuf:"bytes,15,opt,name=jwks,proto3" json:"jwks,omitempty"`
	ClientSecret                          []byte     `protobuf:"bytes,16,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	SubjectType                           string     `protobuf:"bytes,17,opt,name=subject_type,json=subjectType,proto3" json:"subject_type,omitempty"`
	SectorIdentifier                      string     `protobuf:"bytes,18,opt,name=sector_identifier,json=sectorIdentifier,proto3" json:"sector_identifier,omitempty"`
	TokenEndpointAuthMethod               string     `protobuf:"bytes,19,opt,name=token_endpoint_auth_method,json=tokenEndpointAuthMethod,proto3" json:"token_endpoint_auth_method,omitempty"`
	TlsClientAuthSubjectDn                string     `protobuf:"bytes,20,opt,name=tls_client_auth_subject_dn,json=tlsClientAuthSubjectDn,proto3" json:"tls_client_auth_subject_dn,omitempty"`
	TlsClientAuthSanDns                   string     `protobuf:"bytes,21,opt,name=tls_client_auth_san_dns,json=tlsClientAuthSanDns,proto3" json:"tls_client_auth_san_dns,omitempty"`
	TlsClientAuthSanUri                   string     `protobuf:"bytes,22,opt,name=tls_client_auth_san_uri,json=tlsClientAuthSanUri,proto3" json:"tls_client_auth_san_uri,omitempty"`
	TlsClientAuthSanIp                    string     `protobuf:"bytes,23,opt,name=tls_client_auth_san_ip,json=tlsClientAuthSanIp,proto3" json:"tls_client_auth_san_ip,omitempty"`
	TlsClientAuthSanEmail                 string     `protobuf:"bytes,24,opt,name=tls_client_auth_san_email,json=tlsClientAuthSanEmail,proto3" json:"tls_client_auth_san_email,omitempty"`
	TlsClientCertificateBoundAccessTokens bool       `protobuf:"varint,25,opt,name=tls_client_certificate_bound_access_tokens,json=tlsClientCertificateBoundAccessTokens,proto3" json:"tls_client_certificate_bound_access_tokens,omitempty"`
	RequirePushedAuthorizationRequests    bool       `protobuf:"varint,26,opt,name=require_pushed_authorization_requests,json=requirePushedAuthorizationRequests,proto3" json:"require_pushed_authorization_requests,omitempty"`
	RequireSignedRequestObject            bool       `protobuf:"varint,27,opt,name=require_signed_request_object,json=requireSignedRequestObject,proto3" json:"require_signed_request_object,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidc_core_v1_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_oidc_core_v1_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_oidc_core_v1_client_proto_rawDescGZIP(), []int{0}
}

func (x *Client) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Client) GetClientType() ClientType {
	if x != nil {
		return x.ClientType
	}
	return ClientType_CLIENT_TYPE_INVALID
}

func (x *Client) GetRedirectUris() []string {
	if x != nil {
		return x.RedirectUris
	}
	return nil
}

func (x *Client) GetResponseTypes() []string {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *Client) GetResponseModes() []string {
	if x != nil {
		return x.ResponseModes
	}
	return nil
}

func (x *Client) GetGrantTypes() []string {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *Client) GetApplicationType() string {
	if x != nil {
		return x.ApplicationType
	}
	return ""
}

func (x *Client) GetContacts() []string {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Client) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *Client) GetLogoUri() string {
	if x != nil {
		return x.LogoUri
	}
	return ""
}

func (x *Client) GetClientUri() string {
	if x != nil {
		return x.ClientUri
	}
	return ""
}

func (x *Client) GetPolicyUri() string {
	if x != nil {
		return x.PolicyUri
	}
	return ""
}

func (x *Client) GetTosUri() string {
	if x != nil {
		return x.TosUri
	}
	return ""
}

func (x *Client) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *Client) GetJwks() []byte {
	if x != nil {
		return x.Jwks
	}
	return nil
}

func (x *Client) GetClientSecret() []byte {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

func (x *Client) GetSubjectType() string {
	if x != nil {
		return x.SubjectType
	}
	return ""
}

func (x *Client) GetSectorIdentifier() string {
	if x != nil {
		return x.SectorIdentifier
	}
	return ""
}

func (x *Client) GetTokenEndpointAuthMethod() string {
	if x != nil {
		return x.TokenEndpointAuthMethod
	}
	return ""
}

func (x *Client) GetTlsClientAuthSubjectDn() string {
	if x != nil {
		return x.TlsClientAuthSubjectDn
	}
	return ""
}

func (x *Client) GetTlsClientAuthSanDns() string {
	if x != nil {
		return x.TlsClientAuthSanDns
	}
	return ""
}

func (x *Client) GetTlsClientAuthSanUri() string {
	if x != nil {
		return x.TlsClientAuthSanUri
	}
	return ""
}

func (x *Client) GetTlsClientAuthSanIp() string {
	if x != nil {
		return x.TlsClientAuthSanIp
	}
	return ""
}

func (x *Client) GetTlsClientAuthSanEmail() string {
	if x != nil {
		return x.TlsClientAuthSanEmail
	}
	return ""
}

func (x *Client) GetTlsClientCertificateBoundAccessTokens() bool {
	if x != nil {
		return x.TlsClientCertificateBoundAccessTokens
	}
	return false
}

func (x *Client) GetRequirePushedAuthorizationRequests() bool {
	if x != nil {
		return x.RequirePushedAuthorizationRequests
	}
	return false
}

func (x *Client) GetRequireSignedRequestObject() bool {
	if x != nil {
		return x.RequireSignedRequestObject
	}
	return false
}

type ClientMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationType                       *string           `protobuf:"bytes,1,opt,name=application_type,json=applicationType,proto3,oneof" json:"application_type,omitempty"`
	RedirectUris                          []string          `protobuf:"bytes,2,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	TokenEndpointAuthMethod               *string           `protobuf:"bytes,3,opt,name=token_endpoint_auth_method,json=tokenEndpointAuthMethod,proto3,oneof" json:"token_endpoint_auth_method,omitempty"`
	GrantTypes                            []string          `protobuf:"bytes,4,rep,name=grant_types,json=grantTypes,proto3" json:"grant_types,omitempty"`
	ResponseTypes                         []string          `protobuf:"bytes,5,rep,name=response_types,json=responseTypes,proto3" json:"response_types,omitempty"`
	ClientName                            *string           `protobuf:"bytes,6,opt,name=client_name,json=clientName,proto3,oneof" json:"client_name,omitempty"`
	ClientNameI18N                        map[string]string `protobuf:"bytes,7,rep,name=client_name_i18n,json=clientNameI18n,proto3" json:"client_name_i18n,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientUri                             *string           `protobuf:"bytes,8,opt,name=client_uri,json=clientUri,proto3,oneof" json:"client_uri,omitempty"`
	LogoUri                               *string           `protobuf:"bytes,9,opt,name=logo_uri,json=logoUri,proto3,oneof" json:"logo_uri,omitempty"`
	LogoUriI18N                           map[string]string `protobuf:"bytes,10,rep,name=logo_uri_i18n,json=logoUriI18n,proto3" json:"logo_uri_i18n,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scope                                 *string           `protobuf:"bytes,11,opt,name=scope,proto3,oneof" json:"scope,omitempty"`
	Contacts                              []string          `protobuf:"bytes,12,rep,name=contacts,proto3" json:"contacts,omitempty"`
	TosUri                                *string           `protobuf:"bytes,13,opt,name=tos_uri,json=tosUri,proto3,oneof" json:"tos_uri,omitempty"`
	TosUriI18N                            map[string]string `protobuf:"bytes,14,rep,name=tos_uri_i18n,json=tosUriI18n,proto3" json:"tos_uri_i18n,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PolicyUri                             *string           `protobuf:"bytes,15,opt,name=policy_uri,json=policyUri,proto3,oneof" json:"policy_uri,omitempty"`
	PolicyUriI18N                         map[string]string `protobuf:"bytes,16,rep,name=policy_uri_i18n,json=policyUriI18n,proto3" json:"policy_uri_i18n,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JwkUri                                *string           `protobuf:"bytes,17,opt,name=jwk_uri,json=jwkUri,proto3,oneof" json:"jwk_uri,omitempty"`
	Jwks                                  []byte            `protobuf:"bytes,18,opt,name=jwks,proto3,oneof" json:"jwks,omitempty"`
	SoftwareId                            *string           `protobuf:"bytes,19,opt,name=software_id,json=softwareId,proto3,oneof" json:"software_id,omitempty"`
	SoftwareVersion                       *string           `protobuf:"bytes,20,opt,name=software_version,json=softwareVersion,proto3,oneof" json:"software_version,omitempty"`
	SoftwareStatement                     *string           `protobuf:"bytes,21,opt,name=software_statement,json=softwareStatement,proto3,oneof" json:"software_statement,omitempty"`
	SubjectType                           *string           `protobuf:"bytes,22,opt,name=subject_type,json=subjectType,proto3,oneof" json:"subject_type,omitempty"`
	SectorIdentifier                      *string           `protobuf:"bytes,23,opt,name=sector_identifier,json=sectorIdentifier,proto3,oneof" json:"sector_identifier,omitempty"`
	TlsClientAuthSubjectDn                *string           `protobuf:"bytes,24,opt,name=tls_client_auth_subject_dn,json=tlsClientAuthSubjectDn,proto3,oneof" json:"tls_client_auth_subject_dn,omitempty"`
	TlsClientAuthSanDns                   *string           `protobuf:"bytes,25,opt,name=tls_client_auth_san_dns,json=tlsClientAuthSanDns,proto3,oneof" json:"tls_client_auth_san_dns,omitempty"`
	TlsClientAuthSanUri                   *string           `protobuf:"bytes,26,opt,name=tls_client_auth_san_uri,json=tlsClientAuthSanUri,proto3,oneof" json:"tls_client_auth_san_uri,omitempty"`
	TlsClientAuthSanIp                    *string           `protobuf:"bytes,27,opt,name=tls_client_auth_san_ip,json=tlsClientAuthSanIp,proto3,oneof" json:"tls_client_auth_san_ip,omitempty"`
	TlsClientAuthSanEmail                 *string           `protobuf:"bytes,28,opt,name=tls_client_auth_san_email,json=tlsClientAuthSanEmail,proto3,oneof" json:"tls_client_auth_san_email,omitempty"`
	TlsClientCertificateBoundAccessTokens *bool             `protobuf:"varint,29,opt,name=tls_client_certificate_bound_access_tokens,json=tlsClientCertificateBoundAccessTokens,proto3,oneof" json:"tls_client_certificate_bound_access_tokens,omitempty"`
	IntrospectionSignedResponseAlg        *string           `protobuf:"bytes,30,opt,name=introspection_signed_response_alg,json=introspectionSignedResponseAlg,proto3,oneof" json:"introspection_signed_response_alg,omitempty"`
	IntrospectionEncryptedResponseAlg     *string           `protobuf:"bytes,31,opt,name=introspection_encrypted_response_alg,json=introspectionEncryptedResponseAlg,proto3,oneof" json:"introspection_encrypted_response_alg,omitempty"`
	IntrospectionEncryptedResponseEnc     *string           `protobuf:"bytes,32,opt,name=introspection_encrypted_response_enc,json=introspectionEncryptedResponseEnc,proto3,oneof" json:"introspection_encrypted_response_enc,omitempty"`
	ResponseModes                         []string          `protobuf:"bytes,33,rep,name=response_modes,json=responseModes,proto3" json:"response_modes,omitempty"`
	RequirePushedAuthorizationRequests    *bool             `protobuf:"varint,34,opt,name=require_pushed_authorization_requests,json=requirePushedAuthorizationRequests,proto3,oneof" json:"require_pushed_authorization_requests,omitempty"`
	RequireSignedRequestObject            *bool             `protobuf:"varint,35,opt,name=require_signed_request_object,json=requireSignedRequestObject,proto3,oneof" json:"require_signed_request_object,omitempty"`
}

func (x *ClientMeta) Reset() {
	*x = ClientMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidc_core_v1_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta) ProtoMessage() {}

func (x *ClientMeta) ProtoReflect() protoreflect.Message {
	mi := &file_oidc_core_v1_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta.ProtoReflect.Descriptor instead.
func (*ClientMeta) Descriptor() ([]byte, []int) {
	return file_oidc_core_v1_client_proto_rawDescGZIP(), []int{1}
}

func (x *ClientMeta) GetApplicationType() string {
	if x != nil && x.ApplicationType != nil {
		return *x.ApplicationType
	}
	return ""
}

func (x *ClientMeta) GetRedirectUris() []string {
	if x != nil {
		return x.RedirectUris
	}
	return nil
}

func (x *ClientMeta) GetTokenEndpointAuthMethod() string {
	if x != nil && x.TokenEndpointAuthMethod != nil {
		return *x.TokenEndpointAuthMethod
	}
	return ""
}

func (x *ClientMeta) GetGrantTypes() []string {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *ClientMeta) GetResponseTypes() []string {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *ClientMeta) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

func (x *ClientMeta) GetClientNameI18N() map[string]string {
	if x != nil {
		return x.ClientNameI18N
	}
	return nil
}

func (x *ClientMeta) GetClientUri() string {
	if x != nil && x.ClientUri != nil {
		return *x.ClientUri
	}
	return ""
}

func (x *ClientMeta) GetLogoUri() string {
	if x != nil && x.LogoUri != nil {
		return *x.LogoUri
	}
	return ""
}

func (x *ClientMeta) GetLogoUriI18N() map[string]string {
	if x != nil {
		return x.LogoUriI18N
	}
	return nil
}

func (x *ClientMeta) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *ClientMeta) GetContacts() []string {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *ClientMeta) GetTosUri() string {
	if x != nil && x.TosUri != nil {
		return *x.TosUri
	}
	return ""
}

func (x *ClientMeta) GetTosUriI18N() map[string]string {
	if x != nil {
		return x.TosUriI18N
	}
	return nil
}

func (x *ClientMeta) GetPolicyUri() string {
	if x != nil && x.PolicyUri != nil {
		return *x.PolicyUri
	}
	return ""
}

func (x *ClientMeta) GetPolicyUriI18N() map[string]string {
	if x != nil {
		return x.PolicyUriI18N
	}
	return nil
}

func (x *ClientMeta) GetJwkUri() string {
	if x != nil && x.JwkUri != nil {
		return *x.JwkUri
	}
	return ""
}

func (x *ClientMeta) GetJwks() []byte {
	if x != nil {
		return x.Jwks
	}
	return nil
}

func (x *ClientMeta) GetSoftwareId() string {
	if x != nil && x.SoftwareId != nil {
		return *x.SoftwareId
	}
	return ""
}

func (x *ClientMeta) GetSoftwareVersion() string {
	if x != nil && x.SoftwareVersion != nil {
		return *x.SoftwareVersion
	}
	return ""
}

func (x *ClientMeta) GetSoftwareStatement() string {
	if x != nil && x.SoftwareStatement != nil {
		return *x.SoftwareStatement
	}
	return ""
}

func (x *ClientMeta) GetSubjectType() string {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return ""
}

func (x *ClientMeta) GetSectorIdentifier() string {
	if x != nil && x.SectorIdentifier != nil {
		return *x.SectorIdentifier
	}
	return ""
}

func (x *ClientMeta) GetTlsClientAuthSubjectDn() string {
	if x != nil && x.TlsClientAuthSubjectDn != nil {
		return *x.TlsClientAuthSubjectDn
	}
	return ""
}

func (x *ClientMeta) GetTlsClientAuthSanDns() string {
	if x != nil && x.TlsClientAuthSanDns != nil {
		return *x.TlsClientAuthSanDns
	}
	return ""
}

func (x *ClientMeta) GetTlsClientAuthSanUri() string {
	if x != nil && x.TlsClientAuthSanUri != nil {
		return *x.TlsClientAuthSanUri
	}
	return ""
}

func (x *ClientMeta) GetTlsClientAuthSanIp() string {
	if x != nil && x.TlsClientAuthSanIp != nil {
		return *x.TlsClientAuthSanIp
	}
	return ""
}

func (x *ClientMeta) GetTlsClientAuthSanEmail() string {
	if x != nil && x.TlsClientAuthSanEmail != nil {
		return *x.TlsClientAuthSanEmail
	}
	return ""
}

func (x *ClientMeta) GetTlsClientCertificateBoundAccessTokens() bool {
	if x != nil && x.TlsClientCertificateBoundAccessTokens != nil {
		return *x.TlsClientCertificateBoundAccessTokens
	}
	return false
}

func (x *ClientMeta) GetIntrospectionSignedResponseAlg() string {
	if x != nil && x.IntrospectionSignedResponseAlg != nil {
		return *x.IntrospectionSignedResponseAlg
	}
	return ""
}

func (x *ClientMeta) GetIntrospectionEncryptedResponseAlg() string {
	if x != nil && x.IntrospectionEncryptedResponseAlg != nil {
		return *x.IntrospectionEncryptedResponseAlg
	}
	return ""
}

func (x *ClientMeta) GetIntrospectionEncryptedResponseEnc() string {
	if x != nil && x.IntrospectionEncryptedResponseEnc != nil {
		return *x.IntrospectionEncryptedResponseEnc
	}
	return ""
}

func (x *ClientMeta) GetResponseModes() []string {
	if x != nil {
		return x.ResponseModes
	}
	return nil
}

func (x *ClientMeta) GetRequirePushedAuthorizationRequests() bool {
	if x != nil && x.RequirePushedAuthorizationRequests != nil {
		return *x.RequirePushedAuthorizationRequests
	}
	return false
}

func (x *ClientMeta) GetRequireSignedRequestObject() bool {
	if x != nil && x.RequireSignedRequestObject != nil {
		return *x.RequireSignedRequestObject
	}
	return false
}

type SoftwareStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftwareId string `protobuf:"bytes,1,opt,name=software_id,json=softwareId,proto3" json:"software_id,omitempty"`
}

func (x *SoftwareStatement) Reset() {
	*x = SoftwareStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidc_core_v1_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareStatement) ProtoMessage() {}

func (x *SoftwareStatement) ProtoReflect() protoreflect.Message {
	mi := &file_oidc_core_v1_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareStatement.ProtoReflect.Descriptor instead.
func (*SoftwareStatement) Descriptor() ([]byte, []int) {
	return file_oidc_core_v1_client_proto_rawDescGZIP(), []int{2}
}

func (x *SoftwareStatement) GetSoftwareId() string {
	if x != nil {
		return x.SoftwareId
	}
	return ""
}

var File_oidc_core_v1_client_proto protoreflect.FileDescriptor

var file_oidc_core_v1_client_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x69, 0x64, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6f, 0x69, 0x64,
	0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xb6, 0x09, 0x0a, 0x06, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f,
	0x55, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72,
	0x69, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x73, 0x55, 0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x77,
	0x6b, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x77,
	0x6b, 0x73, 0x55, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x77, 0x6b, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x6a, 0x77, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x6e, 0x12, 0x34, 0x0a, 0x17, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x64,
	0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x61, 0x6e, 0x44, 0x6e, 0x73, 0x12, 0x34, 0x0a,
	0x17, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x61, 0x6e,
	0x55, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x16, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x61, 0x6e, 0x49, 0x70, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x6c, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x61, 0x6e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x59, 0x0a, 0x2a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x25,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x41, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x87, 0x16, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x40, 0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x17, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x31, 0x38, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x31, 0x38, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x31, 0x38, 0x6e, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x69, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x69,
	0x31, 0x38, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x69, 0x64, 0x63,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x69, 0x49, 0x31, 0x38, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x69, 0x49, 0x31, 0x38,
	0x6e, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x6f, 0x73, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x74, 0x6f, 0x73,
	0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0c, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x72,
	0x69, 0x5f, 0x69, 0x31, 0x38, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x69, 0x64, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x6f, 0x73, 0x55, 0x72, 0x69, 0x49, 0x31, 0x38,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x6f, 0x73, 0x55, 0x72, 0x69, 0x49, 0x31,
	0x38, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x75, 0x72, 0x69, 0x5f, 0x69, 0x31, 0x38, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x55, 0x72, 0x69, 0x49, 0x31, 0x38, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x69, 0x49, 0x31, 0x38, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x6a,
	0x77, 0x6b, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06,
	0x6a, 0x77, 0x6b, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6a, 0x77, 0x6b,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x04, 0x6a, 0x77, 0x6b, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x10, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x1a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x64, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x16, 0x74, 0x6c,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x17, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x64,
	0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x13, 0x74, 0x6c, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x61, 0x6e, 0x44, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x17, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x13, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x61, 0x6e, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x16, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x12, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x61,
	0x6e, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x19, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x15, 0x74, 0x6c, 0x73,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x61, 0x6e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x25, 0x74, 0x6c, 0x73,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x21, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x15, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41,
	0x6c, 0x67, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x24, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x21, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6c, 0x67, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x24, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x65, 0x6e, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x21, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x25, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x31, 0x38, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x69, 0x49, 0x31, 0x38, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x54,
	0x6f, 0x73, 0x55, 0x72, 0x69, 0x49, 0x31, 0x38, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x69, 0x49, 0x31, 0x38, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x6f, 0x73, 0x5f, 0x75,
	0x72, 0x69, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x72,
	0x69, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6a, 0x77, 0x6b, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6a, 0x77, 0x6b, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x74, 0x6c, 0x73,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6e,
	0x5f, 0x64, 0x6e, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x75, 0x72, 0x69,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6e, 0x5f, 0x69, 0x70, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x73, 0x61, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x42, 0x27,
	0x0a, 0x25, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x63,
	0x42, 0x28, 0x0a, 0x26, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x34, 0x0a, 0x11,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x2a, 0x92, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x04, 0x2a, 0xc0, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x42, 0x15, 0x5a, 0x13, 0x6f, 0x69,
	0x64, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_oidc_core_v1_client_proto_rawDescOnce sync.Once
	file_oidc_core_v1_client_proto_rawDescData = file_oidc_core_v1_client_proto_rawDesc
)

func file_oidc_core_v1_client_proto_rawDescGZIP() []byte {
	file_oidc_core_v1_client_proto_rawDescOnce.Do(func() {
		file_oidc_core_v1_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_oidc_core_v1_client_proto_rawDescData)
	})
	return file_oidc_core_v1_client_proto_rawDescData
}

var file_oidc_core_v1_client_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_oidc_core_v1_client_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_oidc_core_v1_client_proto_goTypes = []interface{}{
	(ClientType)(0),           // 0: oidc.core.v1.ClientType
	(ClientProfile)(0),        // 1: oidc.core.v1.ClientProfile
	(*Client)(nil),            // 2: oidc.core.v1.Client
	(*ClientMeta)(nil),        // 3: oidc.core.v1.ClientMeta
	(*SoftwareStatement)(nil), // 4: oidc.core.v1.SoftwareStatement
	nil,                       // 5: oidc.core.v1.ClientMeta.ClientNameI18nEntry
	nil,                       // 6: oidc.core.v1.ClientMeta.LogoUriI18nEntry
	nil,                       // 7: oidc.core.v1.ClientMeta.TosUriI18nEntry
	nil,                       // 8: oidc.core.v1.ClientMeta.PolicyUriI18nEntry
}
var file_oidc_core_v1_client_proto_depIdxs = []int32{
	0, // 0: oidc.core.v1.Client.client_type:type_name -> oidc.core.v1.ClientType
	5, // 1: oidc.core.v1.ClientMeta.client_name_i18n:type_name -> oidc.core.v1.ClientMeta.ClientNameI18nEntry
	6, // 2: oidc.core.v1.ClientMeta.logo_uri_i18n:type_name -> oidc.core.v1.ClientMeta.LogoUriI18nEntry
	7, // 3: oidc.core.v1.ClientMeta.tos_uri_i18n:type_name -> oidc.core.v1.ClientMeta.TosUriI18nEntry
	8, // 4: oidc.core.v1.ClientMeta.policy_uri_i18n:type_name -> oidc.core.v1.ClientMeta.PolicyUriI18nEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_oidc_core_v1_client_proto_init() }
func file_oidc_core_v1_client_proto_init() {
	if File_oidc_core_v1_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_oidc_core_v1_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidc_core_v1_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidc_core_v1_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_oidc_core_v1_client_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oidc_core_v1_client_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_oidc_core_v1_client_proto_goTypes,
		DependencyIndexes: file_oidc_core_v1_client_proto_depIdxs,
		EnumInfos:         file_oidc_core_v1_client_proto_enumTypes,
		MessageInfos:      file_oidc_core_v1_client_proto_msgTypes,
	}.Build()
	File_oidc_core_v1_client_proto = out.File
	file_oidc_core_v1_client_proto_rawDesc = nil
	file_oidc_core_v1_client_proto_goTypes = nil
	file_oidc_core_v1_client_proto_depIdxs = nil
}
