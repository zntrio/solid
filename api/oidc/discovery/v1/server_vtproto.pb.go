// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.5.0
// source: oidc/discovery/v1/server.proto

package discoveryv1

import (
	fmt "fmt"
	io "io"

	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ServerMetadata) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMetadata) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ServerMetadata) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.SignedMetadata) > 0 {
		i -= len(m.SignedMetadata)
		copy(dAtA[i:], m.SignedMetadata)
		i = encodeVarint(dAtA, i, uint64(len(m.SignedMetadata)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if len(m.IntrospectionEncryptionEncValuesSupported) > 0 {
		for iNdEx := len(m.IntrospectionEncryptionEncValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IntrospectionEncryptionEncValuesSupported[iNdEx])
			copy(dAtA[i:], m.IntrospectionEncryptionEncValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.IntrospectionEncryptionEncValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.IntrospectionEncryptionAlgValuesSupported) > 0 {
		for iNdEx := len(m.IntrospectionEncryptionAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IntrospectionEncryptionAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.IntrospectionEncryptionAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.IntrospectionEncryptionAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.IntrospectionSigningAlgValuesSupported) > 0 {
		for iNdEx := len(m.IntrospectionSigningAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IntrospectionSigningAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.IntrospectionSigningAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.IntrospectionSigningAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.AuthorizationResponseIssParameterSupported {
		i--
		if m.AuthorizationResponseIssParameterSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if len(m.AuthorizationEncryptionEncValuesSupported) > 0 {
		for iNdEx := len(m.AuthorizationEncryptionEncValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuthorizationEncryptionEncValuesSupported[iNdEx])
			copy(dAtA[i:], m.AuthorizationEncryptionEncValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.AuthorizationEncryptionEncValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.AuthorizationEncryptionAlgValuesSupported) > 0 {
		for iNdEx := len(m.AuthorizationEncryptionAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuthorizationEncryptionAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.AuthorizationEncryptionAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.AuthorizationEncryptionAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.AuthorizationSigningAlgValuesSupported) > 0 {
		for iNdEx := len(m.AuthorizationSigningAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuthorizationSigningAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.AuthorizationSigningAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.AuthorizationSigningAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.TlsClientCertificateBoundAccessTokens {
		i--
		if m.TlsClientCertificateBoundAccessTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if len(m.DpopSigningAlgValuesSupported) > 0 {
		for iNdEx := len(m.DpopSigningAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DpopSigningAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.DpopSigningAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.DpopSigningAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.DeviceAuthorizationEndpoint) > 0 {
		i -= len(m.DeviceAuthorizationEndpoint)
		copy(dAtA[i:], m.DeviceAuthorizationEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.DeviceAuthorizationEndpoint)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.MtlsEndpointAliases != nil {
		size, err := m.MtlsEndpointAliases.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if len(m.PushedAuthorizationRequestEndpointAuthMethodsSupported) > 0 {
		for iNdEx := len(m.PushedAuthorizationRequestEndpointAuthMethodsSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PushedAuthorizationRequestEndpointAuthMethodsSupported[iNdEx])
			copy(dAtA[i:], m.PushedAuthorizationRequestEndpointAuthMethodsSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.PushedAuthorizationRequestEndpointAuthMethodsSupported[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.PushedAuthorizationRequestEndpoint) > 0 {
		i -= len(m.PushedAuthorizationRequestEndpoint)
		copy(dAtA[i:], m.PushedAuthorizationRequestEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.PushedAuthorizationRequestEndpoint)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if len(m.CodeChallengeMethodsSupported) > 0 {
		for iNdEx := len(m.CodeChallengeMethodsSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CodeChallengeMethodsSupported[iNdEx])
			copy(dAtA[i:], m.CodeChallengeMethodsSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.CodeChallengeMethodsSupported[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.IntrospectionEndpointAuthSigningAlgValuesSupported) > 0 {
		for iNdEx := len(m.IntrospectionEndpointAuthSigningAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IntrospectionEndpointAuthSigningAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.IntrospectionEndpointAuthSigningAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.IntrospectionEndpointAuthSigningAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.IntrospectionEndpointAuthMethodsSupported) > 0 {
		for iNdEx := len(m.IntrospectionEndpointAuthMethodsSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IntrospectionEndpointAuthMethodsSupported[iNdEx])
			copy(dAtA[i:], m.IntrospectionEndpointAuthMethodsSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.IntrospectionEndpointAuthMethodsSupported[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.IntrospectionEndpoint) > 0 {
		i -= len(m.IntrospectionEndpoint)
		copy(dAtA[i:], m.IntrospectionEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.IntrospectionEndpoint)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.RevocationEndpointAuthSigningAlgValuesSupported) > 0 {
		for iNdEx := len(m.RevocationEndpointAuthSigningAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RevocationEndpointAuthSigningAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.RevocationEndpointAuthSigningAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.RevocationEndpointAuthSigningAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.RevocationEndpointAuthMethodsSupported) > 0 {
		for iNdEx := len(m.RevocationEndpointAuthMethodsSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RevocationEndpointAuthMethodsSupported[iNdEx])
			copy(dAtA[i:], m.RevocationEndpointAuthMethodsSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.RevocationEndpointAuthMethodsSupported[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.RevocationEndpoint) > 0 {
		i -= len(m.RevocationEndpoint)
		copy(dAtA[i:], m.RevocationEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.RevocationEndpoint)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.OpTosUri) > 0 {
		i -= len(m.OpTosUri)
		copy(dAtA[i:], m.OpTosUri)
		i = encodeVarint(dAtA, i, uint64(len(m.OpTosUri)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.OpPolicyUri) > 0 {
		i -= len(m.OpPolicyUri)
		copy(dAtA[i:], m.OpPolicyUri)
		i = encodeVarint(dAtA, i, uint64(len(m.OpPolicyUri)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.RequireRequestUriRegistration {
		i--
		if m.RequireRequestUriRegistration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.RequestUriParameterSupported {
		i--
		if m.RequestUriParameterSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.RequestParameterSupported {
		i--
		if m.RequestParameterSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.ClaimsParameterSupported {
		i--
		if m.ClaimsParameterSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.UiLocalesSupported) > 0 {
		for iNdEx := len(m.UiLocalesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UiLocalesSupported[iNdEx])
			copy(dAtA[i:], m.UiLocalesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.UiLocalesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.ClaimsLocalesSupported) > 0 {
		for iNdEx := len(m.ClaimsLocalesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimsLocalesSupported[iNdEx])
			copy(dAtA[i:], m.ClaimsLocalesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.ClaimsLocalesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.ServiceDocumentation) > 0 {
		i -= len(m.ServiceDocumentation)
		copy(dAtA[i:], m.ServiceDocumentation)
		i = encodeVarint(dAtA, i, uint64(len(m.ServiceDocumentation)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.ClaimsSupported) > 0 {
		for iNdEx := len(m.ClaimsSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimsSupported[iNdEx])
			copy(dAtA[i:], m.ClaimsSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.ClaimsSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.ClaimTypesSupported) > 0 {
		for iNdEx := len(m.ClaimTypesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimTypesSupported[iNdEx])
			copy(dAtA[i:], m.ClaimTypesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.ClaimTypesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.DisplayValuesSupported) > 0 {
		for iNdEx := len(m.DisplayValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisplayValuesSupported[iNdEx])
			copy(dAtA[i:], m.DisplayValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.DisplayValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.TokenEndpointAuthSigningAlgValuesSupported) > 0 {
		for iNdEx := len(m.TokenEndpointAuthSigningAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenEndpointAuthSigningAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.TokenEndpointAuthSigningAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.TokenEndpointAuthSigningAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.TokenEndpointAuthMethodsSupported) > 0 {
		for iNdEx := len(m.TokenEndpointAuthMethodsSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenEndpointAuthMethodsSupported[iNdEx])
			copy(dAtA[i:], m.TokenEndpointAuthMethodsSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.TokenEndpointAuthMethodsSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.RequestObjectEncryptionEncValuesSupported) > 0 {
		for iNdEx := len(m.RequestObjectEncryptionEncValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestObjectEncryptionEncValuesSupported[iNdEx])
			copy(dAtA[i:], m.RequestObjectEncryptionEncValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.RequestObjectEncryptionEncValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.RequestObjectEncryptionAlgValuesSupported) > 0 {
		for iNdEx := len(m.RequestObjectEncryptionAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestObjectEncryptionAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.RequestObjectEncryptionAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.RequestObjectEncryptionAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.RequestObjectSigningAlgValuesSupported) > 0 {
		for iNdEx := len(m.RequestObjectSigningAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestObjectSigningAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.RequestObjectSigningAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.RequestObjectSigningAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.UserinfoEncryptionEncValuesSupported) > 0 {
		for iNdEx := len(m.UserinfoEncryptionEncValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserinfoEncryptionEncValuesSupported[iNdEx])
			copy(dAtA[i:], m.UserinfoEncryptionEncValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.UserinfoEncryptionEncValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.UserinfoEncryptionAlgValuesSupported) > 0 {
		for iNdEx := len(m.UserinfoEncryptionAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserinfoEncryptionAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.UserinfoEncryptionAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.UserinfoEncryptionAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.UserinfoSigningAlgValuesSupported) > 0 {
		for iNdEx := len(m.UserinfoSigningAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserinfoSigningAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.UserinfoSigningAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.UserinfoSigningAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.IdTokenEncryptionEncValuesSupported) > 0 {
		for iNdEx := len(m.IdTokenEncryptionEncValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IdTokenEncryptionEncValuesSupported[iNdEx])
			copy(dAtA[i:], m.IdTokenEncryptionEncValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.IdTokenEncryptionEncValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.IdTokenEncryptionAlgValuesSupported) > 0 {
		for iNdEx := len(m.IdTokenEncryptionAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IdTokenEncryptionAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.IdTokenEncryptionAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.IdTokenEncryptionAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.IdTokenSigningAlgValuesSupported) > 0 {
		for iNdEx := len(m.IdTokenSigningAlgValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IdTokenSigningAlgValuesSupported[iNdEx])
			copy(dAtA[i:], m.IdTokenSigningAlgValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.IdTokenSigningAlgValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.SubjectTypesSupported) > 0 {
		for iNdEx := len(m.SubjectTypesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectTypesSupported[iNdEx])
			copy(dAtA[i:], m.SubjectTypesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.SubjectTypesSupported[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.AcrValuesSupported) > 0 {
		for iNdEx := len(m.AcrValuesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AcrValuesSupported[iNdEx])
			copy(dAtA[i:], m.AcrValuesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.AcrValuesSupported[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.GrantTypesSupported) > 0 {
		for iNdEx := len(m.GrantTypesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GrantTypesSupported[iNdEx])
			copy(dAtA[i:], m.GrantTypesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.GrantTypesSupported[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ResponseModesSupported) > 0 {
		for iNdEx := len(m.ResponseModesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseModesSupported[iNdEx])
			copy(dAtA[i:], m.ResponseModesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.ResponseModesSupported[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ResponseTypesSupported) > 0 {
		for iNdEx := len(m.ResponseTypesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseTypesSupported[iNdEx])
			copy(dAtA[i:], m.ResponseTypesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.ResponseTypesSupported[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ScopesSupported) > 0 {
		for iNdEx := len(m.ScopesSupported) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScopesSupported[iNdEx])
			copy(dAtA[i:], m.ScopesSupported[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.ScopesSupported[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RegistrationEndpoint) > 0 {
		i -= len(m.RegistrationEndpoint)
		copy(dAtA[i:], m.RegistrationEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.RegistrationEndpoint)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UserinfoEndpoint) > 0 {
		i -= len(m.UserinfoEndpoint)
		copy(dAtA[i:], m.UserinfoEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.UserinfoEndpoint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.JwksUri) > 0 {
		i -= len(m.JwksUri)
		copy(dAtA[i:], m.JwksUri)
		i = encodeVarint(dAtA, i, uint64(len(m.JwksUri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenEndpoint) > 0 {
		i -= len(m.TokenEndpoint)
		copy(dAtA[i:], m.TokenEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.TokenEndpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthorizationEndpoint) > 0 {
		i -= len(m.AuthorizationEndpoint)
		copy(dAtA[i:], m.AuthorizationEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.AuthorizationEndpoint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarint(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MTLSEndpoints) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MTLSEndpoints) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MTLSEndpoints) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.DeviceAuthorizationEndpoint) > 0 {
		i -= len(m.DeviceAuthorizationEndpoint)
		copy(dAtA[i:], m.DeviceAuthorizationEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.DeviceAuthorizationEndpoint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PushedAuthorizationRequestEndpoint) > 0 {
		i -= len(m.PushedAuthorizationRequestEndpoint)
		copy(dAtA[i:], m.PushedAuthorizationRequestEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.PushedAuthorizationRequestEndpoint)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IntrospectionEndpoint) > 0 {
		i -= len(m.IntrospectionEndpoint)
		copy(dAtA[i:], m.IntrospectionEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.IntrospectionEndpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RevocationEndpoint) > 0 {
		i -= len(m.RevocationEndpoint)
		copy(dAtA[i:], m.RevocationEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.RevocationEndpoint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenEndpoint) > 0 {
		i -= len(m.TokenEndpoint)
		copy(dAtA[i:], m.TokenEndpoint)
		i = encodeVarint(dAtA, i, uint64(len(m.TokenEndpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerMetadata) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.AuthorizationEndpoint)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.TokenEndpoint)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.JwksUri)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.UserinfoEndpoint)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.RegistrationEndpoint)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if len(m.ScopesSupported) > 0 {
		for _, s := range m.ScopesSupported {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.ResponseTypesSupported) > 0 {
		for _, s := range m.ResponseTypesSupported {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.ResponseModesSupported) > 0 {
		for _, s := range m.ResponseModesSupported {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.GrantTypesSupported) > 0 {
		for _, s := range m.GrantTypesSupported {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.AcrValuesSupported) > 0 {
		for _, s := range m.AcrValuesSupported {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.SubjectTypesSupported) > 0 {
		for _, s := range m.SubjectTypesSupported {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.IdTokenSigningAlgValuesSupported) > 0 {
		for _, s := range m.IdTokenSigningAlgValuesSupported {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.IdTokenEncryptionAlgValuesSupported) > 0 {
		for _, s := range m.IdTokenEncryptionAlgValuesSupported {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.IdTokenEncryptionEncValuesSupported) > 0 {
		for _, s := range m.IdTokenEncryptionEncValuesSupported {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.UserinfoSigningAlgValuesSupported) > 0 {
		for _, s := range m.UserinfoSigningAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.UserinfoEncryptionAlgValuesSupported) > 0 {
		for _, s := range m.UserinfoEncryptionAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.UserinfoEncryptionEncValuesSupported) > 0 {
		for _, s := range m.UserinfoEncryptionEncValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.RequestObjectSigningAlgValuesSupported) > 0 {
		for _, s := range m.RequestObjectSigningAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.RequestObjectEncryptionAlgValuesSupported) > 0 {
		for _, s := range m.RequestObjectEncryptionAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.RequestObjectEncryptionEncValuesSupported) > 0 {
		for _, s := range m.RequestObjectEncryptionEncValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.TokenEndpointAuthMethodsSupported) > 0 {
		for _, s := range m.TokenEndpointAuthMethodsSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.TokenEndpointAuthSigningAlgValuesSupported) > 0 {
		for _, s := range m.TokenEndpointAuthSigningAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.DisplayValuesSupported) > 0 {
		for _, s := range m.DisplayValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.ClaimTypesSupported) > 0 {
		for _, s := range m.ClaimTypesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.ClaimsSupported) > 0 {
		for _, s := range m.ClaimsSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	l = len(m.ServiceDocumentation)
	if l > 0 {
		n += 2 + l + sov(uint64(l))
	}
	if len(m.ClaimsLocalesSupported) > 0 {
		for _, s := range m.ClaimsLocalesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.UiLocalesSupported) > 0 {
		for _, s := range m.UiLocalesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if m.ClaimsParameterSupported {
		n += 3
	}
	if m.RequestParameterSupported {
		n += 3
	}
	if m.RequestUriParameterSupported {
		n += 3
	}
	if m.RequireRequestUriRegistration {
		n += 3
	}
	l = len(m.OpPolicyUri)
	if l > 0 {
		n += 2 + l + sov(uint64(l))
	}
	l = len(m.OpTosUri)
	if l > 0 {
		n += 2 + l + sov(uint64(l))
	}
	l = len(m.RevocationEndpoint)
	if l > 0 {
		n += 2 + l + sov(uint64(l))
	}
	if len(m.RevocationEndpointAuthMethodsSupported) > 0 {
		for _, s := range m.RevocationEndpointAuthMethodsSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.RevocationEndpointAuthSigningAlgValuesSupported) > 0 {
		for _, s := range m.RevocationEndpointAuthSigningAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	l = len(m.IntrospectionEndpoint)
	if l > 0 {
		n += 2 + l + sov(uint64(l))
	}
	if len(m.IntrospectionEndpointAuthMethodsSupported) > 0 {
		for _, s := range m.IntrospectionEndpointAuthMethodsSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.IntrospectionEndpointAuthSigningAlgValuesSupported) > 0 {
		for _, s := range m.IntrospectionEndpointAuthSigningAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.CodeChallengeMethodsSupported) > 0 {
		for _, s := range m.CodeChallengeMethodsSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	l = len(m.PushedAuthorizationRequestEndpoint)
	if l > 0 {
		n += 2 + l + sov(uint64(l))
	}
	if len(m.PushedAuthorizationRequestEndpointAuthMethodsSupported) > 0 {
		for _, s := range m.PushedAuthorizationRequestEndpointAuthMethodsSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if m.MtlsEndpointAliases != nil {
		l = m.MtlsEndpointAliases.SizeVT()
		n += 2 + l + sov(uint64(l))
	}
	l = len(m.DeviceAuthorizationEndpoint)
	if l > 0 {
		n += 2 + l + sov(uint64(l))
	}
	if len(m.DpopSigningAlgValuesSupported) > 0 {
		for _, s := range m.DpopSigningAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if m.TlsClientCertificateBoundAccessTokens {
		n += 3
	}
	if len(m.AuthorizationSigningAlgValuesSupported) > 0 {
		for _, s := range m.AuthorizationSigningAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.AuthorizationEncryptionAlgValuesSupported) > 0 {
		for _, s := range m.AuthorizationEncryptionAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.AuthorizationEncryptionEncValuesSupported) > 0 {
		for _, s := range m.AuthorizationEncryptionEncValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if m.AuthorizationResponseIssParameterSupported {
		n += 3
	}
	if len(m.IntrospectionSigningAlgValuesSupported) > 0 {
		for _, s := range m.IntrospectionSigningAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.IntrospectionEncryptionAlgValuesSupported) > 0 {
		for _, s := range m.IntrospectionEncryptionAlgValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if len(m.IntrospectionEncryptionEncValuesSupported) > 0 {
		for _, s := range m.IntrospectionEncryptionEncValuesSupported {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	l = len(m.SignedMetadata)
	if l > 0 {
		n += 2 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *MTLSEndpoints) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenEndpoint)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.RevocationEndpoint)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.IntrospectionEndpoint)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.PushedAuthorizationRequestEndpoint)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.DeviceAuthorizationEndpoint)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ServerMetadata) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwksUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwksUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserinfoEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserinfoEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrationEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopesSupported = append(m.ScopesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTypesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseTypesSupported = append(m.ResponseTypesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseModesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseModesSupported = append(m.ResponseModesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantTypesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantTypesSupported = append(m.GrantTypesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcrValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcrValuesSupported = append(m.AcrValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectTypesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectTypesSupported = append(m.SubjectTypesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdTokenSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdTokenSigningAlgValuesSupported = append(m.IdTokenSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdTokenEncryptionAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdTokenEncryptionAlgValuesSupported = append(m.IdTokenEncryptionAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdTokenEncryptionEncValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdTokenEncryptionEncValuesSupported = append(m.IdTokenEncryptionEncValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserinfoSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserinfoSigningAlgValuesSupported = append(m.UserinfoSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserinfoEncryptionAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserinfoEncryptionAlgValuesSupported = append(m.UserinfoEncryptionAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserinfoEncryptionEncValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserinfoEncryptionEncValuesSupported = append(m.UserinfoEncryptionEncValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestObjectSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestObjectSigningAlgValuesSupported = append(m.RequestObjectSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestObjectEncryptionAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestObjectEncryptionAlgValuesSupported = append(m.RequestObjectEncryptionAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestObjectEncryptionEncValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestObjectEncryptionEncValuesSupported = append(m.RequestObjectEncryptionEncValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenEndpointAuthMethodsSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenEndpointAuthMethodsSupported = append(m.TokenEndpointAuthMethodsSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenEndpointAuthSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenEndpointAuthSigningAlgValuesSupported = append(m.TokenEndpointAuthSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayValuesSupported = append(m.DisplayValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTypesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimTypesSupported = append(m.ClaimTypesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimsSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimsSupported = append(m.ClaimsSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDocumentation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDocumentation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimsLocalesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimsLocalesSupported = append(m.ClaimsLocalesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UiLocalesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UiLocalesSupported = append(m.UiLocalesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimsParameterSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimsParameterSupported = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestParameterSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestParameterSupported = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestUriParameterSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestUriParameterSupported = bool(v != 0)
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireRequestUriRegistration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireRequestUriRegistration = bool(v != 0)
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpPolicyUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpPolicyUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpTosUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpTosUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevocationEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationEndpointAuthMethodsSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevocationEndpointAuthMethodsSupported = append(m.RevocationEndpointAuthMethodsSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationEndpointAuthSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevocationEndpointAuthSigningAlgValuesSupported = append(m.RevocationEndpointAuthSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntrospectionEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntrospectionEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntrospectionEndpointAuthMethodsSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntrospectionEndpointAuthMethodsSupported = append(m.IntrospectionEndpointAuthMethodsSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntrospectionEndpointAuthSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntrospectionEndpointAuthSigningAlgValuesSupported = append(m.IntrospectionEndpointAuthSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeChallengeMethodsSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeChallengeMethodsSupported = append(m.CodeChallengeMethodsSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedAuthorizationRequestEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushedAuthorizationRequestEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedAuthorizationRequestEndpointAuthMethodsSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushedAuthorizationRequestEndpointAuthMethodsSupported = append(m.PushedAuthorizationRequestEndpointAuthMethodsSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtlsEndpointAliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MtlsEndpointAliases == nil {
				m.MtlsEndpointAliases = &MTLSEndpoints{}
			}
			if err := m.MtlsEndpointAliases.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAuthorizationEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAuthorizationEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DpopSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DpopSigningAlgValuesSupported = append(m.DpopSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsClientCertificateBoundAccessTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TlsClientCertificateBoundAccessTokens = bool(v != 0)
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationSigningAlgValuesSupported = append(m.AuthorizationSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationEncryptionAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationEncryptionAlgValuesSupported = append(m.AuthorizationEncryptionAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationEncryptionEncValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationEncryptionEncValuesSupported = append(m.AuthorizationEncryptionEncValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationResponseIssParameterSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuthorizationResponseIssParameterSupported = bool(v != 0)
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntrospectionSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntrospectionSigningAlgValuesSupported = append(m.IntrospectionSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntrospectionEncryptionAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntrospectionEncryptionAlgValuesSupported = append(m.IntrospectionEncryptionAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntrospectionEncryptionEncValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntrospectionEncryptionEncValuesSupported = append(m.IntrospectionEncryptionEncValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MTLSEndpoints) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MTLSEndpoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MTLSEndpoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevocationEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntrospectionEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntrospectionEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedAuthorizationRequestEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushedAuthorizationRequestEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAuthorizationEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAuthorizationEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
