// Licensed to SolID under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. SolID licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

package oidc.core.v1;

option go_package = "oidc/core/v1;corev1";

enum TokenType {
  TOKEN_TYPE_INVALID = 0;
  TOKEN_TYPE_UNKNOWN = 1;
  TOKEN_TYPE_ACCESS_TOKEN = 2;
  TOKEN_TYPE_REFRESH_TOKEN = 3;
  TOKEN_TYPE_ID_TOKEN = 4;
}

enum TokenStatus {
  TOKEN_STATUS_INVALID = 0;
  TOKEN_STATUS_UNKNOWN = 1;
  TOKEN_STATUS_ACTIVE = 2;
  TOKEN_STATUS_EXPIRED = 3;
  TOKEN_STATUS_REVOKED = 4;
}

message TokenMeta {
  // REQUIRED. Token issuer URI
  string issuer = 1;
  // OPTIONAL. Identity subject
  string subject = 2;
  // REQUIRED. Unix timestamp of the creation date
  fixed64 issued_at = 3;
  // REQUIRED. Unix timestamp of the usability date
  fixed64 not_before = 4;
  // REQUIRED. Unix timestamp of the expiration date
  fixed64 expires_at = 5;
  // REQUIRED. Token owner.
  string client_id = 6;
  // REQUIRED. Space delimited JSON string containing requested scope.
  string scope = 7;
  // REQUIRED. Targeted application identifier.
  string audience = 8;
}

message Actor {
    // OPTIONAL. Token issuer URI
    string issuer = 1;
    // OPTIONAL. Identity subject
    string subject = 2;
    // OPTIONAL. Client identifier.
    string client_id = 3;
    // OPTIONAL. Actor chain.
    Actor act = 4;
}

message Token {
  // REQUIRED. Token type.
  TokenType token_type = 1;
  // REQUIRED. Token identifier.
  string token_id = 2;
  // REQUIRED. Token meta output of token endpoint.
  TokenMeta metadata = 3;
  // REQUIRED. Token status.
  TokenStatus status = 4;
  // REQUIRED. Final token value.
  string value = 5;
  // OPTIONAL. Token confirmation
  TokenConfirmation confirmation = 6;
  // OPTIONAL. Actor.
  repeated Actor actor = 7;
  // OPTIONAL. Authorized Actor.
  repeated Actor may_act = 8;
}

message TokenConfirmation {
  string jkt = 1;
}

message OAuthTokenResponse {
  string access_token = 1;
  string token_type = 2;
  fixed64 expires_in = 3;
  string refresh_token = 4;
  string id_token = 5;
}
