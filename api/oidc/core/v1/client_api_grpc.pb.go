// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: oidc/core/v1/client_api.proto

package corev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientAuthenticationAPIClient is the client API for ClientAuthenticationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientAuthenticationAPIClient interface {
	Authenticate(ctx context.Context, in *ClientAuthenticationRequest, opts ...grpc.CallOption) (*ClientAuthenticationResponse, error)
}

type clientAuthenticationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewClientAuthenticationAPIClient(cc grpc.ClientConnInterface) ClientAuthenticationAPIClient {
	return &clientAuthenticationAPIClient{cc}
}

func (c *clientAuthenticationAPIClient) Authenticate(ctx context.Context, in *ClientAuthenticationRequest, opts ...grpc.CallOption) (*ClientAuthenticationResponse, error) {
	out := new(ClientAuthenticationResponse)
	err := c.cc.Invoke(ctx, "/oidc.core.v1.ClientAuthenticationAPI/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientAuthenticationAPIServer is the server API for ClientAuthenticationAPI service.
// All implementations must embed UnimplementedClientAuthenticationAPIServer
// for forward compatibility
type ClientAuthenticationAPIServer interface {
	Authenticate(context.Context, *ClientAuthenticationRequest) (*ClientAuthenticationResponse, error)
	mustEmbedUnimplementedClientAuthenticationAPIServer()
}

// UnimplementedClientAuthenticationAPIServer must be embedded to have forward compatible implementations.
type UnimplementedClientAuthenticationAPIServer struct {
}

func (UnimplementedClientAuthenticationAPIServer) Authenticate(context.Context, *ClientAuthenticationRequest) (*ClientAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedClientAuthenticationAPIServer) mustEmbedUnimplementedClientAuthenticationAPIServer() {
}

// UnsafeClientAuthenticationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientAuthenticationAPIServer will
// result in compilation errors.
type UnsafeClientAuthenticationAPIServer interface {
	mustEmbedUnimplementedClientAuthenticationAPIServer()
}

func RegisterClientAuthenticationAPIServer(s grpc.ServiceRegistrar, srv ClientAuthenticationAPIServer) {
	s.RegisterService(&ClientAuthenticationAPI_ServiceDesc, srv)
}

func _ClientAuthenticationAPI_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAuthenticationAPIServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oidc.core.v1.ClientAuthenticationAPI/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAuthenticationAPIServer).Authenticate(ctx, req.(*ClientAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientAuthenticationAPI_ServiceDesc is the grpc.ServiceDesc for ClientAuthenticationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientAuthenticationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oidc.core.v1.ClientAuthenticationAPI",
	HandlerType: (*ClientAuthenticationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _ClientAuthenticationAPI_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oidc/core/v1/client_api.proto",
}

// ClientRegistrationAPIClient is the client API for ClientRegistrationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientRegistrationAPIClient interface {
	Register(ctx context.Context, in *ClientRegistrationRequest, opts ...grpc.CallOption) (*ClientRegistrationResponse, error)
}

type clientRegistrationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewClientRegistrationAPIClient(cc grpc.ClientConnInterface) ClientRegistrationAPIClient {
	return &clientRegistrationAPIClient{cc}
}

func (c *clientRegistrationAPIClient) Register(ctx context.Context, in *ClientRegistrationRequest, opts ...grpc.CallOption) (*ClientRegistrationResponse, error) {
	out := new(ClientRegistrationResponse)
	err := c.cc.Invoke(ctx, "/oidc.core.v1.ClientRegistrationAPI/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientRegistrationAPIServer is the server API for ClientRegistrationAPI service.
// All implementations must embed UnimplementedClientRegistrationAPIServer
// for forward compatibility
type ClientRegistrationAPIServer interface {
	Register(context.Context, *ClientRegistrationRequest) (*ClientRegistrationResponse, error)
	mustEmbedUnimplementedClientRegistrationAPIServer()
}

// UnimplementedClientRegistrationAPIServer must be embedded to have forward compatible implementations.
type UnimplementedClientRegistrationAPIServer struct {
}

func (UnimplementedClientRegistrationAPIServer) Register(context.Context, *ClientRegistrationRequest) (*ClientRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedClientRegistrationAPIServer) mustEmbedUnimplementedClientRegistrationAPIServer() {}

// UnsafeClientRegistrationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientRegistrationAPIServer will
// result in compilation errors.
type UnsafeClientRegistrationAPIServer interface {
	mustEmbedUnimplementedClientRegistrationAPIServer()
}

func RegisterClientRegistrationAPIServer(s grpc.ServiceRegistrar, srv ClientRegistrationAPIServer) {
	s.RegisterService(&ClientRegistrationAPI_ServiceDesc, srv)
}

func _ClientRegistrationAPI_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistrationAPIServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oidc.core.v1.ClientRegistrationAPI/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistrationAPIServer).Register(ctx, req.(*ClientRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientRegistrationAPI_ServiceDesc is the grpc.ServiceDesc for ClientRegistrationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientRegistrationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oidc.core.v1.ClientRegistrationAPI",
	HandlerType: (*ClientRegistrationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ClientRegistrationAPI_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oidc/core/v1/client_api.proto",
}
