// Licensed to SolID under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. SolID licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

package oidc.core.v1;

option go_package = "oidc/core/v1;corev1";

import "oidc/core/v1/core.proto";
import "oidc/core/v1/error.proto";
import "oidc/core/v1/client.proto";
import "oidc/core/v1/token.proto";
import "google/protobuf/wrappers.proto";

// -----------------------------------------------------------------------------

service AuthorizationAPI {
  rpc Authorize (AuthorizationCodeRequest) returns (AuthorizationCodeResponse);
  rpc Token (TokenRequest) returns (TokenResponse);
}

// -----------------------------------------------------------------------------

message AuthorizationCodeRequest {
  // REQUIRED. Client that requests the authorization requests registration.
  Client client = 1;

  // REQUIRED. User identity.
  string subject = 2;

  // REQUIRED. Authorization request object.
  AuthorizationRequest authorization_request = 3;
}

// https://www.rfc-editor.org/rfc/rfc6749.html#section-4.1.2
message AuthorizationCodeResponse {
  Error error = 1;
  // REQUIRED.  The authorization code generated by the
  // authorization server.  The authorization code MUST expire
  // shortly after it is issued to mitigate the risk of leaks.  A
  // maximum authorization code lifetime of 10 minutes is
  // RECOMMENDED.  The client MUST NOT use the authorization code
  // more than once.  If an authorization code is used more than
  // once, the authorization server MUST deny the request and SHOULD
  // revoke (when possible) all tokens previously issued based on
  // that authorization code.  The authorization code is bound to
  // the client identifier and redirection URI.
  string code = 2;

  // REQUIRED if the "state" parameter was present in the client
  // authorization request.  The exact value received from the
  // client.
  string state = 3;

  // REQUIRED. Assembled redirection uri to application.
  string redirect_uri = 4;

  // REQUIRED. the client_id of the client the response is intended for.
  string client_id = 5;

  // A JSON number that represents the lifetime of the
  // authorization code in seconds.  The authorization code lifetime is at the
  // discretion of the AS.
  fixed64 expires_in = 6;
}

message RegistrationRequest {
  // REQUIRED. Client that requests the authorization requests registration.
  Client client = 1;

  // REQUIRED. The request to register.
  AuthorizationRequest authorization_request = 2;

  // OPTIONAL. DPoP Proof confirmation.
  TokenConfirmation confirmation = 3;
}

message RegistrationResponse {
  Error error = 1;
  // https://tools.ietf.org/html/draft-lodderstedt-oauth-par-01#section-2.2

  // The request URI corresponding to the authorization
  // request posted.  This URI is used as reference to the respective
  // request data in the subsequent authorization request only.  The
  // way the authorization process obtains the authorization request
  // data is at the discretion of the authorization server and out of
  // scope of this specification.  There is no need to make the
  // authorization request data available to other parties via this
  // URI.
  string request_uri = 2;

  // A JSON number that represents the lifetime of the
  // request URI in seconds.  The request URI lifetime is at the
  // discretion of the AS.
  fixed64 expires_in = 3;
}

message TokenRequest {
  // REQUIRED. Issuer url.
  string issuer = 1;

  // REQUIRED. The client that request token generation.
  Client client = 2;

  // REQUIRED. The grant_type value to use.
  string grant_type = 3;

  // OPTIONAL. Scope to use for token request
  google.protobuf.StringValue scope = 4;

  // OPTIONAL. Token confirmation.
  TokenConfirmation token_confirmation = 5;

  // REQUIRED.
  oneof grant {
    // tools.ietf.org/html/rfc6749#section-1.3.1
    GrantAuthorizationCode authorization_code = 10;
    // tools.ietf.org/html/rfc6749#section-4.4
    GrantClientCredentials client_credentials = 11;
    // tools.ietf.org/html/rfc8628#section-3.4
    GrantDeviceCode device_code = 12;
    // tools.ietf.org/html/rfc6749#section-1.5
    GrantRefreshToken refresh_token = 13;
  }
}

message TokenResponse {
  Error error = 1;
  // REQUIRED. Access token information used to generate the final one.
  Token access_token = 2;
  // OPTIONAL. Refresh token information used to generate the final one.
  Token refresh_token = 3;
  // OPTIONAL. ID Token information.
  Token id_token = 4;
}

// https://tools.ietf.org/html/rfc8628#section-3.1
message DeviceAuthorizationRequest {
  // REQUIRED if the client is not authenticating with the
  // authorization server as described in Section 3.2.1. of [RFC6749].
  // The client identifier as described in Section 2.2 of [RFC6749].
  string client_id = 1;

  // OPTIONAL.  The scope of the access request as defined by
  // Section 3.3 of [RFC6749].
  google.protobuf.StringValue scope = 2;
}

// https://tools.ietf.org/html/rfc8628#section-3.2
message DeviceAuthorizationResponse {
  Error error = 1;
  // REQUIRED.  The device verification code.
  string device_code = 2;
  // REQUIRED.  The end-user verification code.
  string user_code = 3;
  // REQUIRED.  The end-user verification URI on the authorization
  // server.  The URI should be short and easy to remember as end users
  // will be asked to manually type it into their user agent.
  string verification_uri = 4;
  // OPTIONAL.  A verification URI that includes the "user_code" (or
  // other information with the same function as the "user_code"),
  // which is designed for non-textual transmission.
  string verification_uri_complete = 5;
  // REQUIRED.  The lifetime in seconds of the "device_code" and
  // "user_code".
  fixed64 expires_in = 6;
  // OPTIONAL.  The minimum amount of time in seconds that the client
  // SHOULD wait between polling requests to the token endpoint.  If no
  // value is provided, clients MUST use 5 as the default.
  fixed64 interval = 7;
}
